import yfinance as yf
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import pandas as pd
from datetime import datetime
import dash_bootstrap_components as dbc
import base64
from dash.exceptions import PreventUpdate  # Import PreventUpdate from dash.exceptions

# Define the list of tickers
tickers = ["AAPL", "MSFT"]

# Fetch historical stock data since 2000 to today
end_date = datetime.today().strftime('%Y-%m-%d')
start_date = '2000-01-01'
data = {}
for ticker in tickers:
    df = yf.download(ticker, start=start_date, end=end_date)
    data[ticker] = df

# Create a Dash web application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define descriptions for "Ticker Information" data
ticker_info_descriptions = {
    'marketCap': 'Market capitalization (market cap) is the total market value of a publicly traded company\'s outstanding shares of stock. It is calculated by multiplying the stock\'s current market price by its total number of outstanding shares.',
    'trailingPE': 'The Price-to-Earnings (P/E) ratio, calculated as the stock\'s current market price divided by its earnings per share (EPS) over the past 12 months.',
    'forwardPE': 'The forward Price-to-Earnings (P/E) ratio, calculated as the stock\'s current market price divided by its estimated earnings per share (EPS) for the next 12 months.',
    'beta': 'Beta is a measure of a stock\'s volatility in relation to the overall market. A beta value less than 1 indicates lower volatility compared to the market, while a beta greater than 1 indicates higher volatility.',
    'dividendYield': 'Dividend Yield is the annual dividend income an investor can expect to receive from an investment, expressed as a percentage of the investment\'s current market price.',
    'yield': 'Yield is similar to Dividend Yield but can also refer to other types of yield, such as bond yield. It is the income generated by an investment relative to its current market price.',
    'profitMargins': 'Profit Margin is a measure of a company\'s profitability, calculated as the percentage of revenue that remains as profit after all expenses and taxes have been subtracted.',
    'operatingMargins': 'Operating Margin is a measure of a company\'s profitability, calculated as the percentage of revenue that remains as profit after operating expenses have been subtracted.',
    'returnOnEquity': 'Return on Equity (ROE) is a measure of a company\'s profitability, calculated as net income divided by shareholders\' equity. It indicates how effectively a company is using its shareholders\' equity to generate profit.',
    'returnOnAssets': 'Return on Assets (ROA) is a measure of a company\'s profitability, calculated as net income divided by total assets. It indicates how effectively a company is using its assets to generate profit.',
    'totalCash': 'Total Cash represents the total amount of cash and cash equivalents held by a company, including both unrestricted and restricted cash.',
    'totalDebt': 'Total Debt represents the total amount of debt and liabilities owed by a company. It includes both short-term and long-term debt obligations.',
    'totalRevenue': 'Total Revenue is the total income generated by a company from its primary operations, including sales of goods or services, interest, and other sources of income.',
    'grossMargins': 'Gross Margin is a measure of a company\'s profitability, calculated as the percentage of revenue that remains as profit after the cost of goods sold (COGS) has been subtracted.',
    'freeCashflow': 'Free Cash Flow (FCF) is the amount of cash generated by a company\'s operations that is available for distribution to investors, debt reduction, or other purposes after deducting capital expenditures.',
    'enterpriseValue': 'Enterprise Value (EV) is a measure of a company\'s total value, including its market capitalization, debt, and cash. It is often used to assess the potential takeover value of a company.',
    'floatShares': 'Float Shares represent the total number of a company\'s shares that are available for trading by the public. It excludes shares held by insiders, employees, and controlling shareholders.',
    'bookValue': 'Book Value is the net asset value of a company, calculated as its total assets minus its total liabilities. It represents the value of the company\'s equity.',
    'fiftyTwoWeekLow': 'The 52-Week Low is the lowest price at which a stock has traded over the past 52 weeks (1 year). It is used to assess a stock\'s performance relative to its recent trading history.',
    'fiftyTwoWeekHigh': 'The 52-Week High is the highest price at which a stock has traded over the past 52 weeks (1 year). It is used to assess a stock\'s performance relative to its recent trading history.',
}

# Create a Dash web application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the financial report with a large border
app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H1("Financial Report", className="mb-4"), width=12),
    ]),

    dbc.Row([
        dbc.Col([
            html.Div([
                dbc.Label("Select Ticker", className="mb-2"),
                dcc.Dropdown(
                    id='ticker-dropdown',
                    options=[{'label': ticker, 'value': ticker} for ticker in tickers],
                    value=tickers[0],
                ),
                dcc.DatePickerRange(
                    id='date-picker-range',
                    start_date=start_date,
                    end_date=end_date,
                ),
            ]),

            dcc.Graph(id='stock-price-chart'),

            html.Div([
                dbc.Card([
                    dbc.CardHeader("Stock Price Summary", className="bg-primary text-white"),
                    dbc.CardBody(html.Table(id='stock-summary-table', className="table table-striped")),
                ]),
                dbc.Card([
                    dbc.CardHeader("Ticker Information", className="bg-primary text-white"),
                    dbc.CardBody([
                        html.P(id='ticker-description'),
                        html.P(id='ticker-explanation'),
                        html.P(id='ticker-info'),
                    ]),
                ]),
            ], className="mt-4"),
        ], width=8),

        dbc.Col([], width=4),  # Empty column for spacing
    ]),
], className="border p-4")  # Add border and padding to the container


# Define callback to update the stock price chart, summary, and ticker info based on the selected ticker and date range
@app.callback(
    [Output('stock-price-chart', 'figure'),
     Output('stock-summary-table', 'children'),
     Output('ticker-description', 'children'),
     Output('ticker-explanation', 'children'),
     Output('ticker-info', 'children')],
    [Input('ticker-dropdown', 'value'),
     Input('date-picker-range', 'start_date'),
     Input('date-picker-range', 'end_date')]
)
def update_stock_price_chart(selected_ticker, start_date, end_date):
    df = data[selected_ticker]

    # Convert date strings to datetime objects
    start_date = datetime.strptime(start_date, '%Y-%m-%d')
    end_date = datetime.strptime(end_date, '%Y-%m-%d')

    # Filter data based on date range
    df = df[(df.index >= start_date) & (df.index <= end_date)]

    # Create the stock price chart
    figure = {
        'data': [
            go.Scatter(
                x=df.index,
                y=df['Close'],
                mode='lines',
                name=selected_ticker,
            )
        ],
        'layout': {
            'title': f'Stock Price for {selected_ticker}',
            'xaxis': {'title': 'Date'},
            'yaxis': {'title': 'Price ($)'},
        }
    }

    # Create the stock price summary table
    summary_table = html.Table([
        html.Tr([html.Th(col) for col in df.columns]),
        html.Tr([html.Td("{:,.2f}".format(df[col].mean())) for col in df.columns]),
        html.Tr([html.Td("{:,.2f}".format(df[col].min())) for col in df.columns]),
        html.Tr([html.Td("{:,.2f}".format(df[col].max())) for col in df.columns]),
    ], className='table table-striped')

    # Get the ticker's description
    ticker_description = html.P(f"Description: {selected_ticker} is a publicly traded company.")

    # Create explanations for Ticker Information data
    ticker_explanation = html.P("Ticker Information data:")

    # Get detailed ticker info for the top 20 important items
    ticker = yf.Ticker(selected_ticker)
    important_info = {}
    ticker_info = ticker.info

    # Sort the keys based on their importance to stock analysts
    sorted_keys = [
        'marketCap',
        'trailingPE',
        'forwardPE',
        'beta',
        'dividendYield',
        'yield',
        'profitMargins',
        'operatingMargins',
        'returnOnEquity',
        'returnOnAssets',
        'totalCash',
        'totalDebt',
        'totalRevenue',
        'grossMargins',
        'freeCashflow',
        'enterpriseValue',
        'floatShares',
        'bookValue',
        'fiftyTwoWeekLow',
        'fiftyTwoWeekHigh',
    ]

    for key in sorted_keys:
        if key in ticker_info:
            value = ticker_info[key]
            # Check if the value is an integer (no decimals) and format accordingly
            if isinstance(value, int):
                formatted_value = "{:,.0f}".format(value)
            else:
                formatted_value = "{:,.2f}".format(value)
            important_info[key] = formatted_value

    # Create Ticker Information data
    ticker_info_text = ""
    for key, value in important_info.items():
        description = ticker_info_descriptions.get(key, '')
        ticker_info_text += f"**{key}**: {value}\n\n{description}\n\n"

    return figure, summary_table, ticker_description, ticker_explanation, dcc.Markdown(ticker_info_text)


if __name__ == '__main__':
    app.run_server(debug=True)
